// –§–ê–ô–õ: components/shared/ProfileForm.tsx (–∏–ª–∏ –≤–∞—à –ø—É—Ç—å)
'use client';

import React, { useEffect, useState } from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { FormProvider, useForm, SubmitHandler } from 'react-hook-form';
// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ–æ—Ä–º—ã (–≤–∫–ª—é—á–∞—è –ø–∞—Ä–æ–ª–∏)
import { formRegisterSchema, TFormRegisterValues } from './modals/auth-modal/forms/schema'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π
import toast from 'react-hot-toast';
import { signOut, useSession } from 'next-auth/react'; // <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º useSession
import { Container } from './container'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π
import { Title } from './title'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π
import { FormInput } from './form-components/form-input'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π
import { Button } from '../ui/button'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º actions –∏ —Ç–∏–ø SafeUser –∏–∑ –≤–∞—à–µ–≥–æ user-actions
import { updateMyProfile, getCurrentUserProfile, SafeUser } from '@/app/actions/user-actions'; // <-- –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –ü–£–¢–¨ –í–ï–†–ù–´–ô
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
import OrderHistoryList from './order-history-list';
import { Label } from '../ui/label';
import { Input } from '../ui/input';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Props –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ data –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
// interface Props {
//   data: User;
// }

export const ProfileForm: React.FC = () => {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è, –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
    const [profileData, setProfileData] = useState<SafeUser | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const { status: sessionStatus } = useSession();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã react-hook-form
    const form = useForm<TFormRegisterValues>({
        resolver: zodResolver(formRegisterSchema), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É —Å confirmPassword –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        defaultValues: {
            fullName: '',
            email: '',
            password: '',       // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç—ã–µ
            confirmPassword: '',// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç—ã–µ
        },
        mode: 'onBlur', // –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    });
    const { reset, handleSubmit, formState, register } = form; // –ü–æ–ª—É—á–∞–µ–º register

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏
    useEffect(() => {
        const fetchProfile = async () => {
            setIsLoading(true);
            setError(null);
            try {
                const result = await getCurrentUserProfile();
                if (result.success && result.user) {
                    setProfileData(result.user);
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    reset({
                        fullName: result.user.fullName ?? '',
                        email: result.user.email ?? '',
                        password: '', // –ü–∞—Ä–æ–ª–∏ –≤—Å–µ–≥–¥–∞ –ø—É—Å—Ç—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                        confirmPassword: '',
                    });
                } else {
                    setError(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.');
                    toast.error(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.');
                }
            } catch (err) {
                console.error("Failed to fetch profile:", err);
                const message = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.';
                setError(message);
                toast.error(message);
            } finally {
                setIsLoading(false);
            }
        };

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        if (sessionStatus === 'authenticated') {
            fetchProfile();
        } else if (sessionStatus === 'unauthenticated') {
            setError("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.");
            setIsLoading(false);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            // import { useRouter } from 'next/navigation';
            // const router = useRouter(); router.push('/');
        }
        // –ó–∞–≤–∏—Å–∏–º –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏
    }, [sessionStatus, reset]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è
    const onSubmit: SubmitHandler<TFormRegisterValues> = async (formData) => {
         const dataToUpdate = {
             fullName: formData.fullName,
             // –ü–∞—Ä–æ–ª—å –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–≤–µ–¥–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, —Ç.–∫. Zod —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç)
             ...(formData.password && { password: formData.password }),
         };

        try {
            // –í—ã–∑—ã–≤–∞–µ–º Action –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è "–º–æ–µ–≥–æ" –ø—Ä–æ—Ñ–∏–ª—è
            const result = await updateMyProfile(dataToUpdate);

            if (result.success) {
                toast.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! üìù', { icon: '‚úÖ' });
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
                setProfileData(prev => prev ? { ...prev, fullName: formData.fullName } : null);
                reset({ ...formData, password: '', confirmPassword: '' });
            } else {
                 toast.error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', { icon: '‚ùå' });
            }
        } catch (error) {
            console.error("Error updating profile:", error);
            toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.', { icon: '‚ùå' });
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
    const onClickSignOut = () => {
        signOut({ callbackUrl: '/' });
    };

    // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –°–æ—Å—Ç–æ—è–Ω–∏–π ---
    // –ü–æ–∫–∞ —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è
    if (sessionStatus === 'loading' || isLoading) {
        return (
            <Container className='my-10 text-center'>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...</p>
                {/* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä */}
            </Container>
        );
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if (error || !profileData) {
        return (
            <Container className='my-10'>
                 <div className="p-4 text-center border border-red-300 bg-red-50 rounded-md">
                     <p className="font-medium text-red-700">{error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.'}</p>
                     {/* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏", –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω */}
                      {sessionStatus === 'unauthenticated' && (
                          <Button onClick={() => {/* –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –ª–æ–≥–∏–Ω–∞ */}} className="mt-4">–í–æ–π—Ç–∏</Button>
                      )}
                 </div>
            </Container>
        );
    }

    return (
        <Container className='my-10 space-y-10'>
             <div>
                 <Title text={`–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ | #${profileData.id}`} size="md" className="font-bold" />
                 <FormProvider {...form}>
                     <form noValidate className="flex flex-col gap-5 w-full max-w-md mt-6" onSubmit={handleSubmit(onSubmit)}>
                          <div className="space-y-1">
                             <Label htmlFor="profile-email">E-Mail</Label>
                             <Input id="profile-email" readOnly disabled value={profileData.email || ''} />
                          </div>

                          <FormInput name="fullName" label="–ü–æ–ª–Ω–æ–µ –∏–º—è" required />
                          <FormInput name="password" type="password" label="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å)" />
                          <FormInput name="confirmPassword" type="password" label="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å" />

                         {/* –ö–Ω–æ–ø–∫–∏ */}
                         <div className="flex flex-col sm:flex-row gap-3 mt-6">
                            <Button className="flex-1 h-11" type="submit" disabled={formState.isSubmitting || !formState.isDirty}>
                                {formState.isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                            </Button>
                            <Button className="flex-1 h-11" onClick={onClickSignOut} variant="secondary" disabled={formState.isSubmitting} type="button">
                                –í—ã–π—Ç–∏
                            </Button>
                         </div>
                     </form>
                 </FormProvider>
             </div>

             <div className="border-t pt-10">
                 <Title text="–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤" size="md" className="font-bold mb-4" />
                 <OrderHistoryList />
             </div>
        </Container>
    );
};